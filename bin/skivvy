#!/usr/bin/env node
'use strict';

var commander = require('commander');
var chalk = require('chalk');

var normalizeArgs = require('../lib/helpers/normalizeArgs');
var reporter = require('../lib/cli/utils/reporter');
var Api = require('../lib/api');

var cliConfig = require('../lib/cli/config');
var cliInit = require('../lib/cli/init');
var cliInstall = require('../lib/cli/install');
var cliList = require('../lib/cli/list');
var cliRun = require('../lib/cli/run');
var cliUninstall = require('../lib/cli/uninstall');
var cliUpdate = require('../lib/cli/update');

var pkg = require('../package.json');

reporter(Api);

var numPrimaryArgs = 1;
var argv = normalizeArgs(process.argv, numPrimaryArgs);
var commandName = (argv.length > 2) && (argv[2].charAt(0) !== '-') ? argv.splice(2, 1)[0] : null;

var commands = getCommands();

var activeCommand = getCommand(commandName, commands);
if (!activeCommand) { activeCommand = getCommand(null, commands); }

var app = createApp(activeCommand);
argv = sanitizeBooleanArgs(argv, app);
app.parse(argv);

if (activeCommand.action) {
	activeCommand.action(app.args, app);
} else {
	app.help();
}


function createApp(activeCommand) {
	var app = commander
		.version(pkg.version);

	if (activeCommand.usage) {
		app.usage(activeCommand.usage);
	}
	if (activeCommand.description) {
		app.description(activeCommand.description);
	}
	if (activeCommand.options) {
		activeCommand.options.forEach(function(option) {
			app.option(option.usage, option.description);
		});
	}
	return app;
}

function getCommand(commandName, commands) {
	commandName = commandName || null;
	return commands.filter(function(command) {
		return command.name === commandName;
	})[0] || null;
}

function getCommands() {
	var subCommands = createSubCommands();
	var mainCommand = createMainCommand(subCommands);
	return [mainCommand].concat(subCommands);

	function createMainCommand(subCommands) {
		var command = {
			name: null,
			usage: '<command> [options]',
			description: 'Commands:',
			options: [],
			action: null
		};
		var defaultOptions = [
			{
				usage: '-h, --help',
				description: 'output usage information'
			},
			{
				usage: '-V, --version',
				description: 'output the version number'
			}
		];

		var commandHelp = createCommandList(subCommands, defaultOptions.concat(command.options));
		command.description += '\n\n' + commandHelp;

		return command;

		function createCommandList(commands, options) {
			var maxCommandLength = commands.map(function(command) {
				return command.name;
			}).reduce(function(maxLength, commandName) {
				return Math.max(maxLength, commandName.length);
			}, 0);

			var maxOptionLength = options.map(function(option) {
				return option.usage;
			}).reduce(function(maxLength, optionName) {
				return Math.max(maxLength, optionName.length);
			}, 0);

			var columnWidth = Math.max(maxCommandLength, maxOptionLength);

			return commands.map(function(command) {
				var commandName = command.name;
				var commandDescription = command.description;
				var paddedCommandName = padString(commandName, columnWidth, ' ');
				return '    ' + paddedCommandName + '  ' + commandDescription;
			}).join('\n');


			function padString(string, length, padCharacter) {
				while (string.length < length) { string += padCharacter; }
				return string;
			}
		}
	}

	function createSubCommands() {
		var commonOptions = [
			{
				usage: '-p, --path [path]',
				description: 'project path'
			},
			{
				usage: '-v, --verbose',
				description: 'Verbose error output'
			}
		];
		var subCommands = [
			{
				name: 'init',
				usage: 'init',
				description: 'Initialize a project',
				options: [],
				action: createCommandAction(cliInit)
			},
			{
				name: 'install',
				usage: 'install <package> [package...] [options]',
				description: 'Install a package',
				options: [],
				action: createCommandAction(cliInstall)
			},
			{
				name: 'uninstall',
				usage: 'uninstall <package> [package...] [options]',
				description: 'Uninstall a package',
				options: [],
				action: createCommandAction(cliUninstall)
			},
			{
				name: 'update',
				usage: 'update <package> [package...] [options]',
				description: 'Update a package',
				options: [],
				action: createCommandAction(cliUpdate)
			},
			{
				name: 'list',
				usage: 'list [options]',
				description: 'List installed packages and tasks',
				options: [
					{
						usage: '-q, --quiet',
						description: 'simple output'
					}
				],
				action: createCommandAction(cliList)
			},
			{
				name: 'config',
				usage: 'config <get|set> [options]',
				description: 'Get/set environment/package/task configuration',
				options: [
					{
						usage: '-t, --task [name]',
						description: 'task name'
					},
					{
						usage: '-T, --target [name]',
						description: 'task target name'
					},
					{
						usage: '-P, --package [name]',
						description: 'task package name'
					},
					{
						usage: '-e, --env [name]',
						description: 'environment name'
					},
					{
						usage: '-c, --config <json>',
						description: 'configuration updates'
					}
				],
				action: createCommandAction(cliConfig)
			},
			{
				name: 'run',
				usage: 'run <task> [task...] [options]',
				description: 'Run a task',
				options: [
					{
						usage: '-c, --config <json>',
						description: 'task configuration overrides'
					},
					{
						usage: '-e, --env [name]',
						description: 'environment name'
					},
					{
						usage: '-C, --cwd [path]',
						description: 'custom working directory'
					}
				],
				action: createCommandAction(cliRun)
			}
		];

		return subCommands.map(function(subCommand) {
			subCommand.options = subCommand.options.concat(commonOptions);
			return subCommand;
		});


		function createCommandAction(command) {
			return function(args, options) {
				try {
					command(args, options, function(error) {
						if (error) { handleError(error); }
					});
				} catch (error) {
					handleError(error);
				}


				function handleError(error) {
					if (error.name === 'InvalidArgumentsError') {
						console.error(chalk.red(error.message));
						return options.help();
					} else if (error.name === 'TaskError') {
						console.error(chalk.red(error.message));
						if (options.verbose) {
							console.error(error.stack);
						}
					} else if (getIsUserError(error)) {
						console.error(chalk.red(error.message));
						if (options.verbose) {
							console.error(error.stack);
						}
					} else {
						throw error;
					}
				}
			};


			function getIsUserError(error) {
				return Object.keys(Api.errors).some(function(errorName) {
					var errorClass = Api.errors[errorName];
					return error instanceof errorClass;
				});
			}
		}
	}
}

function sanitizeBooleanArgs(argv, app) {
	var booleanArgs = app.options.filter(function(option) {
		return option.bool;
	}).map(function(option) {
		return [option.short, option.long];
	}).reduce(function(booleanArgs, optionVariants) {
		return booleanArgs.concat(optionVariants);
	}, []);
	return argv.filter(function(arg, index, array) {
		if (index === 0) { return true; }
		if (typeof arg !== 'boolean') { return true; }
		var previousArg = array[index - 1];
		var previousArgIsFlag = (typeof previousArg === 'string') && (previousArg.charAt(0) === '-');
		if (!previousArgIsFlag) { return true; }
		var isBooleanArg = booleanArgs.indexOf(previousArg) !== -1;
		return !isBooleanArg;
	});
}
